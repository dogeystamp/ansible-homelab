#!/usr/bin/nft -f

flush ruleset

table inet filter {
  set ipv4_vpn1 {
    typeof ip saddr
    flags interval
    elements = { {{ vpn1_subnet }} }
  }

  set ipv4_lan {
    typeof ip saddr
    flags interval
    elements = { {{ lan_subnet }} }
  }

  chain input {
    type filter hook input priority filter; policy drop;

    ct state invalid drop

    # drop VPN subnet traffic that's not on the VPN
    meta iifname != "wg1" ip saddr { {{ vpn1_subnet }} } drop

    ct state { established, related } accept
    meta l4proto { icmp, ipv6-icmp } accept
    iif lo accept

    ip saddr @ipv4_vpn1 goto input.internal
    ip saddr @ipv4_lan goto input.lan
    goto input.external
  }

  chain input.internal {
    tcp dport { ssh } accept

{% if nftables_internal_listens_tcp %}
  	tcp dport { {{ nftables_internal_listens_tcp | join(', ') }} } accept
{% endif %}

{% if nftables_internal_listens_udp %}
  	udp dport { {{ nftables_internal_listens_udp | join(', ') }} } accept
{% endif %}

    goto input.lan
  }

  chain input.lan {
{% if nftables_preset in ["bastion", "controller"] %}
    tcp dport { ssh } accept
{% endif %}
    goto input.external
  }

  chain input.external {
{% if nftables_preset == "bastion" %}
    udp dport { 51820 } accept
{% endif %}

{% if nftables_external_listens_tcp %}
  	tcp dport { {{ nftables_external_listens_tcp | join(', ') }} } accept
{% endif %}

{% if nftables_external_listens_udp %}
  	udp dport { {{ nftables_external_listens_udp | join(', ') }} } accept
{% endif %}
  }

  chain forward {
    type filter hook forward priority filter; policy drop;

    ip saddr @ipv4_vpn1 goto forward.internal
  }

  chain forward.internal {
{% if nftables_preset == "bastion" %}
    accept
{% endif %}
  }

  chain output { type filter hook output priority filter; policy accept; }
}

{% if nftables_preset == "bastion" %}
table inet nat {
  chain postrouting {
    type nat hook postrouting priority 100;

    meta iifname "wg1" masquerade
  }
}
{% endif %}

